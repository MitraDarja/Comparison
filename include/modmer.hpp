// -----------------------------------------------------------------------------------------------------
// Copyright (c) 2006-2021, Knut Reinert & Freie Universität Berlin
// Copyright (c) 2016-2021, Knut Reinert & MPI für molekulare Genetik
// This file may be used, modified and/or redistributed under the terms of the 3-clause BSD-License
// shipped with this file and also available at: https://github.com/seqan/seqan3/blob/master/LICENSE.md
// -----------------------------------------------------------------------------------------------------

/*!\file
 * \author Mitra Darvish <mitra.darvish AT fu-berlin.de>
 * \brief Provides modmer.
 */

#pragma once

#include <seqan3/std/algorithm>
#include <deque>

#include <seqan3/core/detail/empty_type.hpp>
#include <seqan3/core/range/detail/adaptor_from_functor.hpp>
#include <seqan3/core/range/type_traits.hpp>
#include <seqan3/utility/range/concept.hpp>
#include <seqan3/utility/type_traits/lazy_conditional.hpp>

#include "shared.hpp"

namespace seqan3::detail
{
// ---------------------------------------------------------------------------------------------------------------------
// modmer_view class
// ---------------------------------------------------------------------------------------------------------------------

/*!\brief The type returned by modmer.
 * \tparam urng1_t The type of the underlying range, must model std::ranges::forward_range, the reference type must
 *                 model std::totally_ordered. The typical use case is that the reference type is the result of
 *                 seqan3::kmer_hash.
 * \tparam urng2_t The type of the underlying range, must model std::ranges::forward_range, the reference type must
 *                 model std::totally_ordered. The typical use case is that the reference type is the result of
 *                 seqan3::kmer_hash.
 * \implements std::ranges::view
 * \ingroup search_views
 *
 *
 * \note Most members of this class are generated by std::ranges::view_interface which is not yet documented here.
 */
template <std::ranges::view urng1_t, std::ranges::view urng2_t = std::ranges::empty_view<seqan3::detail::empty_type>>
class modmer_view : public std::ranges::view_interface<modmer_view<urng1_t>>
{
private:
    static_assert(std::ranges::forward_range<urng1_t>, "The modmer_view only works on forward_ranges.");
    static_assert(std::totally_ordered<std::ranges::range_reference_t<urng1_t>>,
                  "The reference type of the underlying range must model std::totally_ordered.");

    //!\brief The default argument of the second range.
    using default_urng2_t = std::ranges::empty_view<seqan3::detail::empty_type>;

    //!\brief Boolean variable, which is true, when second range is not of empty type.
    static constexpr bool second_range_is_given = !std::same_as<urng2_t, default_urng2_t>;

    static_assert(!second_range_is_given
                      || std::totally_ordered_with<std::ranges::range_reference_t<urng1_t>,
                                                   std::ranges::range_reference_t<urng2_t>>,
                  "The reference types of the underlying ranges must model std::totally_ordered_with.");

    //!\brief Whether the given ranges are const_iterable
    static constexpr bool const_iterable =
        seqan3::const_iterable_range<urng1_t> && seqan3::const_iterable_range<urng2_t>;

    //!\brief The first underlying range.
    urng1_t urange1{};

    //!\brief The second underlying range.
    urng2_t urange2{};

    //!\brief The mod value used.
    size_t mod_used{};

    //!\brief The seed used.
    size_t seed_used{};

    template <bool const_range>
    class basic_iterator;

    //!\brief The sentinel type of the modmer_view.
    using sentinel = std::default_sentinel_t;

public:
    /*!\name Constructors, destructor and assignment
     * \{
     */
     /// \cond Workaround_Doxygen
    modmer_view() requires std::default_initializable<urng1_t> = default; //!< Defaulted.
    /// \endcond
    modmer_view(modmer_view const & rhs) = default; //!< Defaulted.
    modmer_view(modmer_view && rhs) = default; //!< Defaulted.
    modmer_view & operator=(modmer_view const & rhs) = default; //!< Defaulted.
    modmer_view & operator=(modmer_view && rhs) = default; //!< Defaulted.
    ~modmer_view() = default; //!< Defaulted.

    /*!\brief Construct from a view and a given number of values in one window.
    * \param[in] urange1     The input range to process. Must model std::ranges::viewable_range and
    *                        std::ranges::forward_range.
    * \param[in] mod_used    The modvalue used.
    * \param[in] seed_used   The seed used.
    */
        explicit modmer_view(urng1_t urange1, size_t const mod_used, uint64_t const seed_used) :
        modmer_view{std::move(urange1), default_urng2_t{}, mod_used, seed_used}
    {}

    /*!\brief Construct from a non-view that can be view-wrapped and a given number of values in one window.
    * \tparam other_urng1_t  The type of another urange. Must model std::ranges::viewable_range and be constructible
                             from urng1_t.
    * \param[in] urange1     The input range to process. Must model std::ranges::viewable_range and
    *                        std::ranges::forward_range.
    * \param[in] mod_used    The modvalue used.
    * \param[in] seed_used        The seed used.
    */
    template <typename other_urng1_t>
    //!\cond
        requires (std::ranges::viewable_range<other_urng1_t> &&
                  std::constructible_from<urng1_t, ranges::ref_view<std::remove_reference_t<other_urng1_t>>>)
    //!\endcond
    modmer_view(other_urng1_t && urange1, size_t const mod_used, uint64_t const seed_used) :
        urange1{std::views::all(std::forward<other_urng1_t>(urange1))},
        urange2{default_urng2_t{}},
        mod_used{mod_used},
        seed_used{seed_used}
    {}

    /*!\brief Construct from a view and a given number of values in one window.
    * \param[in] urange1     The input range to process. Must model std::ranges::viewable_range and
    *                        std::ranges::forward_range.
    * \param[in] urange2     The input range to process. Must model std::ranges::viewable_range and
    *                        std::ranges::forward_range.
    * \param[in] mod_used    The modvalue used.
    * \param[in] seed_used        The seed used.
    */
    modmer_view(urng1_t urange1, urng2_t urange2, size_t const mod_used, uint64_t const seed_used) :
        urange1{urange1},
        urange2{urange2},
        mod_used{mod_used},
        seed_used{seed_used}
    {
        if constexpr (second_range_is_given)
        {
            if (std::ranges::distance(urange1) != std::ranges::distance(urange2))
                throw std::invalid_argument{"The two ranges do not have the same size."};
        }
    }

    /*!\brief Construct from a non-view that can be view-wrapped and a given number of values in one window.
    * \tparam other_urng1_t  The type of another urange. Must model std::ranges::viewable_range and be constructible
                             from urng1_t.
    * \tparam other_urng2_t  The type of another urange. Must model std::ranges::viewable_range and be constructible
                                  from urng2_t.
    * \param[in] urange1     The input range to process. Must model std::ranges::viewable_range and
    *                        std::ranges::forward_range.
    * \param[in] urange2     The second input range to process. Must model std::ranges::viewable_range and
    *                        std::ranges::forward_range.
    * \param[in] mod_used    The modvalue used.
    * \param[in] seed_used   The seed used.
    */
    template <typename other_urng1_t, typename other_urng2_t>
    //!\cond
      requires (std::ranges::viewable_range<other_urng1_t>
                && std::constructible_from<urng1_t, std::views::all_t<other_urng1_t>>
                && std::ranges::viewable_range<other_urng2_t>
                && std::constructible_from<urng2_t, std::views::all_t<other_urng2_t>>)
    //!\endcond
      explicit modmer_view(other_urng1_t && urange1, other_urng2_t && urange2, size_t const mod_used, uint64_t const seed_used) :
          urange1{std::views::all(std::forward<other_urng1_t>(urange1))},
          urange2{std::views::all(std::forward<other_urng2_t>(urange2))},
          mod_used{mod_used},
          seed_used{seed_used}
      {
          if constexpr (second_range_is_given)
          {
              if (std::ranges::distance(urange1) != std::ranges::distance(urange2))
                  throw std::invalid_argument{"The two ranges do not have the same size."};
          }
      }

    /*!\name Iterators
     * \{
     */
    /*!\brief Returns an iterator to the first element of the range.
     * \returns Iterator to the first element.
     *
     * \details
     *
     * ### Complexity
     *
     * Constant.
     *
     * ### Exceptions
     *
     * Strong exception guarantee.
     */
    basic_iterator<false> begin()
    {
        return {std::ranges::begin(urange1),
                std::ranges::begin(urange2),
                std::ranges::end(urange1),
                mod_used,
                seed_used};
    }

    //!\copydoc begin()
    basic_iterator<true> begin() const
    //!\cond
        requires const_iterable
    //!\endcond
    {
        return {std::ranges::cbegin(urange1),
                std::ranges::cbegin(urange2),
                std::ranges::cend(urange1),
                mod_used,
                seed_used};
    }

    /*!\brief Returns an iterator to the element following the last element of the range.
     * \returns Iterator to the end.
     *
     * \details
     *
     * This element acts as a placeholder; attempting to dereference it results in undefined behaviour.
     *
     * ### Complexity
     *
     * Constant.
     *
     * ### Exceptions
     *
     * No-throw guarantee.
     */
    sentinel end() const
    {
        return {};
    }
    //!\}
};

//!\brief Iterator for calculating modmers.
template <std::ranges::view urng1_t, std::ranges::view urng2_t>
template <bool const_range>
class modmer_view<urng1_t, urng2_t>::basic_iterator
{
private:
    //!\brief The sentinel type of the first underlying range.
    using urng1_sentinel_t = maybe_const_sentinel_t<const_range, urng1_t>;
    //!\brief The iterator type of the first underlying range.
    using urng1_iterator_t = maybe_const_iterator_t<const_range, urng1_t>;
    //!\brief The iterator type of the second underlying range.
    using urng2_iterator_t = maybe_const_iterator_t<const_range, urng2_t>;

    template <bool>
    friend class basic_iterator;

public:
    /*!\name Associated types
     * \{
     */
    //!\brief Type for distances between iterators.
    using difference_type = std::ranges::range_difference_t<urng1_t>;
    //!\brief Value type of this iterator.
    using value_type = std::ranges::range_value_t<urng1_t>;
    //!\brief The pointer type.
    using pointer = void;
    //!\brief Reference to `value_type`.
    using reference = value_type;
    //!\brief Tag this class as a forward iterator.
    using iterator_category = std::forward_iterator_tag;
    //!\brief Tag this class as a forward iterator.
    using iterator_concept = iterator_category;
    //!\}

    /*!\name Constructors, destructor and assignment
     * \{
     */
    basic_iterator() = default; //!< Defaulted.
    basic_iterator(basic_iterator const &) = default; //!< Defaulted.
    basic_iterator(basic_iterator &&) = default; //!< Defaulted.
    basic_iterator & operator=(basic_iterator const &) = default; //!< Defaulted.
    basic_iterator & operator=(basic_iterator &&) = default; //!< Defaulted.
    ~basic_iterator() = default; //!< Defaulted.

    //!\brief Allow iterator on a const range to be constructible from an iterator over a non-const range.
    basic_iterator(basic_iterator<!const_range> const & it)
    //!\cond
        requires const_range
    //!\endcond
        : modmer_value{std::move(it.modmer_value)},
          urng1_iterator{std::move(it.urng1_iterator)},
          urng2_iterator{std::move(it.urng2_iterator)},
          urng1_sentinel{std::move(it.urng1_sentinel)}
    {}

    /*!\brief Construct from begin and end iterators of a given range over std::totally_ordered values, and the number
              of values per window.
    * \param[in] urng1_iterator Iterator pointing to the first position of the first std::totally_ordered range.
    * \param[in] urng2_iterator Iterator pointing to the first position of the second std::totally_ordered range.
    * \param[in] urng1_sentinel Iterator pointing to the last position of the first std::totally_ordered range.
    * \param[in] mod_used The modvalue used.
    * \param[in] mod_used The seed value used.
    *
    * \details
    *
    * Looks at the number of values per window in two ranges, returns the smallest between both as modmer and
    * shifts then by one to repeat this action. If a modmer in consecutive windows is the same, it is returned only
    * once.
    */
    basic_iterator(urng1_iterator_t urng1_iterator,
                   urng2_iterator_t urng2_iterator,
                   urng1_sentinel_t urng1_sentinel,
                   size_t mod_used,
                   uint64_t seed_used) :
        urng1_iterator{urng1_iterator},
        urng2_iterator{urng2_iterator},
        urng1_sentinel{urng1_sentinel},
        mod{mod_used},
        seed{seed_used}
    {
        size_t size = std::ranges::distance(urng1_iterator, urng1_sentinel);
        mod_used = std::min<size_t>(mod_used, size);

        first_modmer();
    }
    //!\}

    //!\anchor basic_iterator_comparison_modmer
    //!\name Comparison operators
    //!\{

    //!\brief Compare to another basic_iterator.
    friend bool operator==(basic_iterator const & lhs, basic_iterator const & rhs)
    {
        return ((lhs.urng1_iterator == rhs.urng1_iterator) && (rhs.urng2_iterator == rhs.urng2_iterator));
    }

    //!\brief Compare to another basic_iterator.
    friend bool operator!=(basic_iterator const & lhs, basic_iterator const & rhs)
    {
        return !(lhs == rhs);
    }

    //!\brief Compare to the sentinel of the modmer_view.
    friend bool operator==(basic_iterator const & lhs, sentinel const &)
    {
        return lhs.urng1_iterator == lhs.urng1_sentinel;
    }

    //!\brief Compare to the sentinel of the modmer_view.
    friend bool operator==(sentinel const & lhs, basic_iterator const & rhs)
    {
        return rhs == lhs;
    }

    //!\brief Compare to the sentinel of the modmer_view.
    friend bool operator!=(sentinel const & lhs, basic_iterator const & rhs)
    {
        return !(lhs == rhs);
    }

    //!\brief Compare to the sentinel of the modmer_view.
    friend bool operator!=(basic_iterator const & lhs, sentinel const & rhs)
    {
        return !(lhs == rhs);
    }
    //!\}

    //!\brief Pre-increment.
    basic_iterator & operator++() noexcept
    {
        next_unique_modmer();
        return *this;
    }

    //!\brief Post-increment.
    basic_iterator operator++(int) noexcept
    {
        basic_iterator tmp{*this};
        next_unique_modmer();
        return tmp;
    }

    //!\brief Return the modmer.
    value_type operator*() const noexcept
    {
        return modmer_value;
    }

private:
    //!\brief The modmer value.
    value_type modmer_value{};

    //!\brief Iterator to the rightmost value of one window.
    urng1_iterator_t urng1_iterator{};
    //!\brief Iterator to the rightmost value of one window of the second range.
    urng2_iterator_t urng2_iterator{};
    //!brief Iterator to last element in range.
    urng1_sentinel_t urng1_sentinel{};

    //!brief The mod value used.
    size_t mod{};

    //!brief The seed value used.
    uint64_t seed{};

    //!\brief Advances the window to the next position.
    void advance()
    {
        ++urng1_iterator;
        if constexpr (second_range_is_given)
            ++urng2_iterator;
    }

    void first_modmer()
    {
        if (!next_modmer())
            next_unique_modmer();
    }

    //!\brief Increments iterator by 1.
    void next_unique_modmer()
    {
        while (1)
        {
            advance();
            if (next_modmer())
                break;
        }
    }

    /*!\brief Calculates the next modmer value.
     * \returns True, if new modmer is found or end is reached. Otherwise returns false.
     */
    bool next_modmer()
    {
        if (urng1_iterator == urng1_sentinel)
            return true;

        if constexpr (second_range_is_given)
        {
            if (fnv_hash(std::min(*urng1_iterator, *urng2_iterator), seed) % mod == 0)
            {
                modmer_value = std::min(*urng1_iterator, *urng2_iterator);
                return true;
            }

            return false;
        }
        else
        {
            if (*urng1_iterator % mod == 0)
            {
                modmer_value = *urng1_iterator;
                return true;
            }

            return false;
        }
    }
};

//!\brief A deduction guide for the view class template.
template <std::ranges::viewable_range rng1_t>
modmer_view(rng1_t &&, size_t const mod_used, uint64_t seed_used) -> modmer_view<std::views::all_t<rng1_t>>;

//!\brief A deduction guide for the view class template.
template <std::ranges::viewable_range rng1_t, std::ranges::viewable_range rng2_t>
modmer_view(rng1_t &&, rng2_t &&, size_t const mod_used, uint64_t seed_used)
    -> modmer_view<std::views::all_t<rng1_t>, std::views::all_t<rng2_t>>;

// ---------------------------------------------------------------------------------------------------------------------
// modmer_fn (adaptor definition)
// ---------------------------------------------------------------------------------------------------------------------

//![adaptor_def]
//!\brief modmer's range adaptor object type (non-closure).
//!\ingroup search_views
struct modmer_fn
{
    //!\brief Store the number of values in one window and return a range adaptor closure object.
    constexpr auto operator()(size_t const mod_used, uint64_t const seed_used = 0) const
    {
        return adaptor_from_functor{*this, mod_used, seed_used};
    }

    /*!\brief Call the view's constructor with two arguments: the underlying view and an integer indicating how many
     *        values one window contains.
     * \tparam urng1_t        The type of the input range to process. Must model std::ranges::viewable_range.
     * \param[in] urange1     The input range to process. Must model std::ranges::viewable_range and
     *                        std::ranges::forward_range.
     * \param[in] mod_used    The modvalue used.
     * \param[in] seed_used   The seed used.
     * \returns  A range of converted values.
     */
    template <std::ranges::range urng1_t>
    constexpr auto operator()(urng1_t && urange1, size_t const mod_used, uint64_t const seed_used = 0) const
    {
        static_assert(std::ranges::forward_range<urng1_t>,
                      "The range parameter to views::modmer must model std::ranges::forward_range.");

        return modmer_view{urange1, mod_used, seed_used};
    }
};
//![adaptor_def]

} // namespace seqan3::detail

/*!\brief Computes modmers for a range of comparable values. A modmer is a value that fullfills the
          condition value % mod_used.
 * \tparam urng_t The type of the first range being processed. See below for requirements. [template
 *                 parameter is omitted in pipe notation]
 * \param[in] urange1 The range being processed. [parameter is omitted in pipe notation]
 * \param[in] mod_used The mod value used.
 * \param[in] seed_used The seed value used.
 * \returns A range of std::totally_ordered where each value is ... See below for the
 *          properties of the returned range.
 * \ingroup search_views
 *
 *
 * ### View properties
 *
 * | Concepts and traits              | `urng_t` (underlying range type)   | `rrng_t` (returned range type)   |
 * |----------------------------------|:----------------------------------:|:--------------------------------:|
 * | std::ranges::input_range         | *required*                         | *preserved*                      |
 * | std::ranges::forward_range       | *required*                         | *preserved*                      |
 * | std::ranges::bidirectional_range |                                    | *lost*                           |
 * | std::ranges::random_access_range |                                    | *lost*                           |
 * | std::ranges::contiguous_range    |                                    | *lost*                           |
 * |                                  |                                    |                                  |
 * | std::ranges::viewable_range      | *required*                         | *guaranteed*                     |
 * | std::ranges::view                |                                    | *guaranteed*                     |
 * | std::ranges::sized_range         |                                    | *lost*                           |
 * | std::ranges::common_range        |                                    | *lost*                           |
 * | std::ranges::output_range        |                                    | *lost*                           |
 * | seqan3::const_iterable_range     |                                    | *preserved*                      |
 * |                                  |                                    |                                  |
 * | std::ranges::range_reference_t   | std::totally_ordered               | std::totally_ordered             |
 *
 * See the views views submodule documentation for detailed descriptions of the view properties.
 */
inline constexpr auto modmer = seqan3::detail::modmer_fn{};
